# =============================
# ðŸ”’ NGINX SECURITY HARDENING
# =============================

# Block sensitive file extensions and hidden directories
location ~* /\.(?!well-known\/) {
    deny all;
    access_log off;
    log_not_found off;
}
location ~* "\.(asa|asax|ascx|axd|bak|bat|cdx|cer|cfg|cmd|com|conf|config|cs|csproj|csr|db|dbf|dll|htr|htw|ida|idc|idq|inc|ini|key|licx|lnk|log|mdb|old|pass|pdb|pol|pwd|rdb|resources|resx|sql|swp|sys|vb|vbs|vbproj|vsdisco|webinfo|xsd|xsx|bzr|_darcs|git|ssh|svn|class)$" {
    deny all;
    access_log off;
    log_not_found off;
}

# Block known documentation and changelog files
location ~* "/(?i)(readme|license|example|legalnotice|installation|changelog)\.(txt|html|md)$" {
    deny all;
    access_log off;
    log_not_found off;
}

# Block backup and dangerous file extensions
location ~* "\.(old|orig|original|php#|php~|php_bak|save|swo|sh|bash|tpl|cgi|dll|exe|git|hg|jsp|out|tar|rdf)$" {
    deny all;
    access_log off;
    log_not_found off;
}

# Block local IP reference attempts
location ~* "127\.0\.0\.1" {
    deny all;
    access_log off;
    log_not_found off;
}

# Block suspicious scripting and eval usage
location ~* "(eval\(|base64_encode\()" {
    deny all;
    access_log off;
    log_not_found off;
}

# Block malicious URIs or JS
location ~* "(<|%3C).*script.*(>|%3E)" {
    deny all;
    access_log off;
    log_not_found off;
}

# Block file/directory traversal
location ~ "(\\.\.|\.\./|~|<|>|\||\{|\}|\[|\]|\$|\s)" {
    deny all;
    access_log off;
    log_not_found off;
}

# Block SQL Injection in URI
location ~* "(\'|\")(.*)(drop|insert|md5|select|union)" {
    deny all;
    access_log off;
    log_not_found off;
}

# Block common exploit patterns
location ~* "(boot\.ini|etc/passwd|self/environ|wp-config\.php|muieblackcat|cgi-|\.php$)" {
    deny all;
    access_log off;
    log_not_found off;
}

# Block suspicious .php files
location ~* "/(?i)(mobiquo|phpinfo|shell|sqlpatch|thumb(_editor|open)?|timthumb|webshell|configuration)\.php$" {
    deny all;
    access_log off;
    log_not_found off;
}

# ----------------------------
# Conditional Blocking Section
# ----------------------------

# SQL Injection protection
set $block_sql_injections 0;
if ($query_string ~* "union.*select.*\(") { set $block_sql_injections 1; }
if ($query_string ~* "concat.*\(")       { set $block_sql_injections 1; }
if ($query_string ~* "drop\s+table")     { set $block_sql_injections 1; }
if ($block_sql_injections = 1) {
    return 403;
}

# File injection protection
set $block_file_injections 0;
if ($query_string ~* "[\w]+=http[s]?://")           { set $block_file_injections 1; }
if ($query_string ~* "[\w]+=.*(\.\./|\./)")         { set $block_file_injections 1; }
if ($block_file_injections = 1) {
    return 403;
}

# Common web exploit strings
set $block_common_exploits 0;
if ($query_string ~* "(<|%3C).*script.*(>|%3E)")    { set $block_common_exploits 1; }
if ($query_string ~* "proc/self/environ")           { set $block_common_exploits 1; }
if ($query_string ~* "base64_(en|de)code\(")        { set $block_common_exploits 1; }
if ($query_string ~* "mosConfig_[\w]{1,21}")        { set $block_common_exploits 1; }
if ($block_common_exploits = 1) {
    return 403;
}

# Spam keywords
set $block_spam 0;
if ($query_string ~* "(viagra|cialis|tramadol|valium|xanax|ambien|hoodia|erection|libido)") {
    set $block_spam 1;
}
if ($block_spam = 1) {
    return 403;
}

# Block user agents
set $block_user_agents 0;
if ($http_user_agent ~* "(libwww|Indy Library|GetRight|GetWeb|Go!Zilla|Download Demon|GrabNet|TurnitinBot)") {
    set $block_user_agents 1;
}
if ($block_user_agents = 1) {
    return 403;
}

# Block SSTI attacks (Server-Side Template Injection)
set $block_ssti 0;
if ($request ~* "(freemarker|Execute)") {
    set $block_ssti 1;
}
if ($block_ssti = 1) {
    return 403;
}
